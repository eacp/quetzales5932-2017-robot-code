// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.quetzales5932.jack.subsystems;

import org.quetzales5932.jack.RobotMap;
import org.quetzales5932.jack.commands.*;

import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Chassis extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController m0 = RobotMap.chassism0;
    private final SpeedController m1 = RobotMap.chassism1;
    private final RobotDrive drive2 = RobotMap.chassisDrive2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final ADXRS450_Gyro gyro = new ADXRS450_Gyro();
    //velocidad por default
    public double speed = RobotMap.highSpeed;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ArcadeDriveWithOneJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    //DRIVE
    
    /*
     NO CAMBIEN arcadeDrive
     
     SI NO QUIEREN VERSE CON LA IRA DE LOS SENORES DE VEX, JAVA
     NATIONAL INSTRUMENTS O EL MAESTRO ROSEMBERG
     
     NO CAMBIEN ESTO
     
     
    */
    public void arcadeDrive(double x,double y){
    	//el - es para invertir el eje x y corregir el error de la direcccion
    	drive2.arcadeDrive(y*speed, -x*speed);
    	//compensacion mistica del Maestro Rosemberg
    	
    	double s0 = m1.get();
    	m1.set(s0*-0.9);
    	//m0.set(0);
    }
    
    public void stop(){
    	drive2.arcadeDrive(0,0);
    	/*double s0 = m0.get();
    	m0.set(s0*0.8);*/
    }
    //Descomentar cuando tengamos los motores
    public void setMotors(double l, double r){
    	m0.set(l);
    	m1.set(r);
    }
    
    
    //DIRECTION
    public void resetGyro(){
    	gyro.reset();
    	System.out.println("Se ha reiniciado el giroscopio");
    }
    public int getAngle(){
    	return (int) gyro.getAngle();
    }
}


