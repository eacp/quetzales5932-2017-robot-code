// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.quetzales5932.jack;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.Victor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	//servos
    public static Servo gearContainerGearServo;
    public static Servo gearContainerGearServo2;
    //IZQUIERDA
    public static SpeedController chassism0;
    //DERECHA
    public static SpeedController chassism1;
    
    public static RobotDrive chassisDrive2;
    public static Servo ballContainerBallServo1;
    public static SpeedController ballContainerSpinner;
    public static SpeedController climberMotor;
    //CONSTANTES MISTICAS PARA NO TENER QUE PONERLAS EN CUALQUIER LADO
    
    //Velocidades
    public static final double reallyLowSpeed = 0.25;
    public static final double lowSpeed = 0.51;
    public static final double midSpeed = 0.75;
    public static final double highSpeed = 1.00;
    
    public static void init() {
        gearContainerGearServo = new Servo(4);
        LiveWindow.addActuator("GearContainer", "GearServo", gearContainerGearServo);
        
        gearContainerGearServo2 = new Servo(7);
        LiveWindow.addActuator("GearContainer", "GearServo2", gearContainerGearServo2);
        //DERECHA
        chassism0 = new Victor(0);
        //IZQUIERDA
        chassism1 = new VictorSP(1);
        
        chassisDrive2 = new RobotDrive(chassism0, chassism1);
        
        chassisDrive2.setSafetyEnabled(true);
        chassisDrive2.setExpiration(0.1);
        chassisDrive2.setSensitivity(0.5);
        chassisDrive2.setMaxOutput(1.0);

        chassisDrive2.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        ballContainerBallServo1 = new Servo(5);
        LiveWindow.addActuator("BallContainer", "BallServo1", ballContainerBallServo1);
        
        ballContainerSpinner = new Spark(8);
        LiveWindow.addActuator("BallContainer", "Spinner", (Spark) ballContainerSpinner);
        
        climberMotor = new Spark(6);
        LiveWindow.addActuator("Climber", "Motor", (Spark) climberMotor);
    }
}
