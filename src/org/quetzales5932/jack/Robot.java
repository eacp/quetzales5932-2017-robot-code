// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.quetzales5932.jack;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.CameraServer;

import org.quetzales5932.jack.autonomous.*;
import org.quetzales5932.jack.commands.*;
import org.quetzales5932.jack.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    Command autonomousCommand;
    String autoSelected;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static GearContainer gearContainer;
    public static Chassis chassis;
    public static BallContainer ballContainer;
    public static Climber climber;
    public static BallRetriever retriever;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //public SendableChooser autoChooser;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
    //funciona porque si no Ros me mata
    CameraServer.getInstance().startAutomaticCapture(0);
    CameraServer.getInstance().startAutomaticCapture(1);
    
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        gearContainer = new GearContainer();
        chassis = new Chassis();
        ballContainer = new BallContainer();
        climber = new Climber();
        retriever = new BallRetriever();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        /*autoChooser = new SendableChooser<Command>();
        autoChooser.addDefault("SOLO CENTRO", new Center());
        autoChooser.addObject("Centro con giro azul", new BlueCenter());
        autoChooser.addObject("Azul derecho 1", new BlueRight());
        autoChooser.addObject("Girar 90 grados SOLO PRUEBA", new TurnDegrees(90));
        
        SmartDashboard.putData("Auto Selector",autoChooser);*/
        //cerrar el servo para que no pase nada
        Robot.gearContainer.close();
        SmartDashboard.putString("Auto Selector", "Centro");
        SmartDashboard.putString("Auto Selector", "AZUL Derecha 1");
        SmartDashboard.putString("Auto Selector", "AZUL Centro L 1");
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    	// obtenerel auto
    	//autonomousCommand = (Command) autoChooser.getSelected();
    	autoSelected = SmartDashboard.getString("Auto Selector", "Centro");
    	//Seleccionar el autonomo
    	switch (autoSelected) {
    		//-----AZUL-----
			case "AZUL Derecha 1":
				autonomousCommand = new BlueRight();
				break;
			case "AZUL Centro 1":
				autonomousCommand = new BlueCenter();
				break;
			case "AZUL Izquierda 1":
				autonomousCommand = new BlueLeft();
				break;
			//-----ROJO-----
			case "ROJO Derecho 1":
				autonomousCommand = new RedRight();
				break;
			case "ROJO Izquierdo 1":
				autonomousCommand = new RedLeft();
				break;
			case "ROJO Centro 1":
				autonomousCommand = new RedCenter();
				break;
			//-----NINGUNO-----
			default:
				autonomousCommand = new Center();
				break;
		}
    	System.out.println("Se ha detectado el autonomo " + autonomousCommand.getName());
    	//ya iniciar iniciar
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
